name: Deploy to GCP Cloud Run

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: rampart-backend
  ARTIFACT_REGISTRY_REPO: rampart-backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests
        run: |
          cd backend
          pytest tests/ -v --cov=api --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend

  build-and-deploy:
    name: Build and Deploy to GCP
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/rampart-backend"
          
          # Build image
          docker build -t $IMAGE_URL:$IMAGE_TAG ./backend
          docker tag $IMAGE_URL:$IMAGE_TAG $IMAGE_URL:latest
          
          # Push to Artifact Registry
          docker push $IMAGE_URL:$IMAGE_TAG
          docker push $IMAGE_URL:latest
          
          echo "IMAGE_URL=$IMAGE_URL:$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_URL }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances 1 \
            --max-instances 100 \
            --cpu 2 \
            --memory 4Gi \
            --concurrency 80 \
            --timeout 300 \
            --set-env-vars "ENVIRONMENT=production" \
            --vpc-connector rampart-connector \
            --vpc-egress private-ranges-only \
            --service-account rampart-cloud-run-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
      
      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
      
      - name: Verify deployment
        run: |
          # Wait for deployment
          sleep 15
          
          # Health check
          curl -f ${{ env.SERVICE_URL }}/health || exit 1
          
          echo "‚úÖ Deployment successful! API available at: ${{ env.SERVICE_URL }}"
      
      - name: Notify on success
        if: success()
        run: |
          echo "üöÄ Deployment to Cloud Run completed successfully!"
          echo "Service URL: ${{ steps.get-url.outputs.url }}"
          echo "Image: ${{ env.IMAGE_URL }}"
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed. Check logs for details."
          gcloud run services logs read ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --limit 50

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: failure()
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Rollback Cloud Run service
        run: |
          echo "Rolling back to previous revision..."
          
          # Get previous revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(name)' \
            --limit 2 | tail -n 1)
          
          # Update traffic to previous revision
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --to-revisions $PREVIOUS_REVISION=100
          
          echo "‚úÖ Rollback completed to: $PREVIOUS_REVISION"
